<!-- ===================================================================
 License:
    DiscerningEye - FFXIV Gathering Companion App
    SettingsView.xaml
    
    Copyright(C) 2015 - 2016  Christopher Whitley    

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.If not, see<http://www.gnu.org/licenses/> .
  =================================================================== -->

<UserControl x:Class="DiscerningEye.Views.Settings"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:DiscerningEye.Views"
             xmlns:prop="clr-namespace:DiscerningEye.Properties"
             xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
             xmlns:prism="http://prismlibrary.com/"
             prism:ViewModelLocator.AutoWireViewModel="True"
             mc:Ignorable="d" 
             d:DesignHeight="1500" d:DesignWidth="400">
    <Grid>
        <ScrollViewer>
            <StackPanel>
                <GroupBox Header="Application Settings">
                    <StackPanel>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Adjust the settings for the application"
                                   Margin="5,0,0,10"/>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="UI Theme Accent"
                                   Margin="5,5" />
                        <ComboBox ItemsSource="{Binding Source={x:Static prop:Settings.Default}, Path=UIAccentList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  SelectedValue="{Binding Source={x:Static prop:Settings.Default}, Path=UIAccent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="UI Theme Base"
                                   Margin="5,10,5,5" />
                        <ComboBox ItemsSource="{Binding Source={x:Static prop:Settings.Default}, Path=UIAppThemeList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  SelectedValue="{Binding Source={x:Static prop:Settings.Default}, Path=UIAppTheme, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="UI Scaling"
                                   Margin="5,10,5,5" />
                        <ComboBox  ItemsSource="{Binding Source={x:Static prop:Settings.Default}, Path=UIScaleList, Mode=OneTime, UpdateSourceTrigger=PropertyChanged}"
                                  SelectedValue="{Binding Source={x:Static prop:Settings.Default}, Path=UIScale, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <CheckBox Margin="5,10,5,5"
                                  Content="Inverse Base Theme On Flyouts"
                                  IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=UseInverseOnFlyout, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </StackPanel>
                </GroupBox>


                <GroupBox Header="Eorzea Clock Settings">
                    <StackPanel Orientation="Vertical">
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Manually adjust the time shown on the Eorzean Clock" 
                                   Margin="5,0,0,10"/>
                        <Grid Margin="5,5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="20" />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="20" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <Controls:NumericUpDown Grid.Row="0"
                                                    Grid.Column="0"
                                                    Minimum="-23"
                                                    Maximum="23"
                                                    Value="{Binding Source={x:Static prop:Settings.Default}, Path=ClockOffsetHours, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    HideUpDownButtons="True"
                                                    Margin="0,0"/>
                            <Label Grid.Row="1"
                                   Grid.Column="0"
                                   Content="Hours" 
                                   Margin="5,0"/>
                            <Controls:NumericUpDown Grid.Row="0"
                                                    Grid.Column="2"
                                                    Minimum="-59"
                                                    Maximum="59"
                                                    Value="{Binding Source={x:Static prop:Settings.Default}, Path=ClockOffsetMinutes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    HideUpDownButtons="True"
                                                    Margin="5,0"/>
                            <Label Grid.Row="1"
                                   Grid.Column="2"
                                   Content="Minutes" 
                                   Margin="5,0"/>
                            <Controls:NumericUpDown Grid.Row="0"
                                                    Grid.Column="4"
                                                    Minimum="-59"
                                                    Maximum="59"
                                                    Value="{Binding Source={x:Static prop:Settings.Default}, Path=ClockOffsetSeconds, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    HideUpDownButtons="True"
                                                    Margin="5,0"/>
                            <Label Grid.Row="1"
                                   Grid.Column="4"
                                   Content="Seconds" 
                                   Margin="5,0"/>


                        </Grid>

                    </StackPanel>
                </GroupBox>



                <GroupBox Header="Alarm Settings">
                    <StackPanel Orientation="Vertical"
                                Margin="5,5">
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Adjust settings for the alarms"
                                   Margin="0,0,0,10"/>
                        <CheckBox Content="Enable Alarms" 
                                  Margin="5,5"
                                  IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=EnableAlarms, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <CheckBox Content="Enable Early Warning" 
                                  Margin="5,5"
                                  IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=EnableEarlyWarning, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <StackPanel Orientation="Horizontal"
                                    Margin="5,5">
                            <Controls:NumericUpDown Minimum="0"
                                                    Maximum="60"
                                                    Value="{Binding Source={x:Static prop:Settings.Default}, Path=EarlyWarningMinutes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    HideUpDownButtons="True"
                                                    Margin="0,0"
                                                    />
                            <TextBlock TextWrapping="WrapWithOverflow"
                                       Text="Number of minutes for early warning"
                                       Margin="5,0"/>
                        </StackPanel>
                    </StackPanel>
                </GroupBox>



                <GroupBox Header="Notification Settings" >
                    <StackPanel Orientation="Vertical">
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Adjust the settings for how to be notified that an alarm has triggered" 
                                   Margin="5,0,0,10"/>
                        <CheckBox Content="Do Not Disturb Mode (No Notifications)"
                                  Margin="5,5"
                                  IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=DoNotDisturb, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <CheckBox Content="Enable Taskbar Ballon Popups"
                                  Margin="5,5"
                                  IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=EnableBallonTip, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <CheckBox Content="Enable Notification Tone"
                                  Margin="5,5"
                                  IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=EnableNotificationTone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <CheckBox Content="Enable Text-To-Speech"
                                  Margin="5,5"
                                  IsChecked="{Binding Source={x:Static prop:Settings.Default}, Path=EnableTextToSpeech, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </StackPanel>
                </GroupBox>


                <GroupBox Header="Notification Tone Settings">
                    <StackPanel>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Enter the file location of a .mp3 you would like to use as the notification tone." 
                                   Margin="5,0,0,10"/>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition Height="10" />
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="250"/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <TextBox Grid.Row="0"
                                 Grid.Column="0"
                                     Text="{Binding Source={x:Static prop:Settings.Default}, Path=NotificationToneUri, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            <Button Grid.Row="0"
                                    Grid.Column="2"
                                    Content="Browse" 
                                    Command="{Binding SelectFileCommand}"/>
                            <StackPanel Grid.Row="2"
                                        Grid.Column="0"
                                        Orientation="Horizontal">
                                <Controls:NumericUpDown Minimum="0"
                                                    Maximum="100"
                                                    Value="{Binding Source={x:Static prop:Settings.Default}, Path=NotificationToneVolume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    HideUpDownButtons="True"
                                                    Margin="0,0"/>
                                <TextBlock TextWrapping="WrapWithOverflow"
                                           VerticalAlignment="Center"
                                           Text="Notification Tone Volume"
                                       Margin="5,0"/>
                            </StackPanel>
                            <Button Grid.Row="2"
                                    Grid.Column="2"
                                    Content="{Binding TestButtonText}"
                                    Command="{Binding TestNotificationCommand}"/>
                        </Grid>

                    </StackPanel>
                </GroupBox>




                <GroupBox Header="Text-To-Speech Settings">
                    <StackPanel>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Enter the message template to be used when you recieve a notification message"
                                   Margin="5,0,0,10"/>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Early Warning Message Template"
                                   Margin="5,5"/>
                        <TextBox Text="{Binding Source={x:Static prop:Settings.Default}, Path=EarlyWarningMessage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 Margin="5,5"
                                 Controls:TextBoxHelper.Watermark="{}{item} will be available in {time}"/>
                        <TextBlock TextWrapping="WrapWithOverflow"
                                   Text="Item Available Message Template"
                                   Margin="5,5"/>
                        <TextBox Text="{Binding Source={x:Static prop:Settings.Default}, Path=ItemAvailableMessage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                 Margin="5,5"
                                 Controls:TextBoxHelper.Watermark="{}{item} is available to be gathered in {zone}"/>

                        <StackPanel Margin="5,5"
                                    Orientation="Horizontal">
                            <Controls:NumericUpDown Minimum="0"
                                                    Maximum="100"
                                                    Value="{Binding Source={x:Static prop:Settings.Default}, Path=TextToSpeechVolume, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                    HideUpDownButtons="True"
                                                    Margin="0,0"/>
                            <TextBlock TextWrapping="WrapWithOverflow"
                                           VerticalAlignment="Center"
                                           Text="Text-To-Speech Volume"
                                       Margin="5,0"/>
                        </StackPanel>
                    </StackPanel>
                </GroupBox>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
